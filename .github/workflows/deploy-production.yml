# 워크플로우의 이름을 "개인 Vercel 계정으로 배포"로 설정합니다.
name: Vercel 배포

on:
  workflow_dispatch:

jobs:
  # "배포" 작업을 정의합니다.
  deploy-start:
    # 이 작업은 Ubuntu 최신 버전에서 실행됩니다.
    runs-on: ubuntu-latest

    # 작업에서 순차적으로 실행할 단계들을 정의합니다.
    steps:
      # 1단계: GitHub 레포지토리의 코드를 체크아웃합니다.
      - name: 레포지토리 체크아웃
        uses: actions/checkout@v3

      # 2단계: Node.js 환경을 설정합니다. 버전 18을 사용합니다.
      - name: Node.js 설정
        uses: actions/setup-node@v3
        with:
          node-version: '20.17.0'

      # 3단계: pnpm 패키지 매니저를 설치합니다. 버전 8을 사용합니다.
      - name: pnpm 설치
        uses: pnpm/action-setup@v2
        with:
          version: 8
          run_install: false # 이 단계에서는 의존성을 설치하지 않습니다.

      # 4단계: pnpm 스토어 디렉토리 경로를 환경 변수로 저장합니다.
      # 이는 다음 단계에서 캐싱에 사용됩니다.
      - name: pnpm 스토어 디렉토리 가져오기
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      # 5단계: pnpm 캐시를 설정하여 의존성 설치 속도를 향상시킵니다.
      - name: pnpm 캐시 설정
        uses: actions/cache@v3
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      # 6단계: 프로젝트의 의존성 패키지들을 설치합니다.
      - name: 의존성 패키지 설치
        run: pnpm install

      # 7단계: 프로젝트를 빌드합니다.
      - name: 프로젝트 빌드
        run: pnpm build

      # 8단계: Vercel CLI를 전역으로 설치합니다.
      - name: Vercel CLI 설치
        run: pnpm add -g vercel

      # 9단계: Vercel에 프로젝트를 배포합니다.
      # ./apps/web 디렉토리를 배포 루트로 지정합니다.
      - name: 개인 Vercel 계정으로 배포
        run: vercel deploy --prod --token=${{ secrets.PERSONAL_VERCEL_TOKEN }} ./apps/web
        env:
          # 필요한 Vercel 환경 변수들을 설정합니다.
          # 이 값들은 GitHub 레포지토리의 Secrets에 저장되어 있습니다.
          VERCEL_TOKEN: ${{ secrets.PERSONAL_VERCEL_TOKEN }}
          VERCEL_PROJECT_ID: ${{ secrets.PERSONAL_VERCEL_PROJECT_ID }}
          VERCEL_ORG_ID: ${{ secrets.PERSONAL_VERCEL_ORG_ID }}
